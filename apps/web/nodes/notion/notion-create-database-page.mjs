// // first search in nodes, if not create with ai
// // should be easy create change language
// // developer should first using library reach result and after try to recreate all stack
// // plus if it request it should just use fetch for this
// //how to define cutome or base node
// export default = {
//     "Info": {
//         "name": "notion-create-database-page", //generated by AI
//         "action_decription": "Create page in Notion", //generated by AI
//         "node_decription": "Notion is service for ...", //generated by AI
//         "url": "/api/notion-create-database-page", //generated by AI
//         "status": "developing", //default developing (generated by ai). Options [developing/working/stuck] Managed my node-manager.js
//         "tags": ["notion", "storage", "content-managment"]// generated by AI
//         "type": "base"// options[base/custome]
//         "github_url": "base"// options[base/custome]
//     },
//     "development": {
//         "environment": "node18.x",
//         "default_build_promt": "",
//         "default_system_promt": "",
//         "default_error_handling_promt": "",
//         "default_steps_promt": "",
//         "steps_prompts": ["Import notion client", "Initilize client", "Get database properties", "set database properties", "save page to database"] //generate by AI
//         "run": async function (data) {


//         },
//         "dependances": [
//             {
//                 "name": "@notionhq/client" //generated by AI
//                 "version": "latest", //default latest; generated by AI
//                 "source-code": "https://github.com/makenotion/notion-sdk-js", //generated by AI
//                 "readme": "https://raw.githubusercontent.com/makenotion/notion-sdk-js/main/README.md", //generated by AI
//                 "docs": "https://developers.notion.com/reference/intro" //generated by AI
//                 "description": "A simple and easy to use client for the Notion API" //generated by AI
//             }
//         ],
//         "function_limitations": {},//versell limitation
//         "parameters": {
//             "type": "object",
//             "properties": {
//                 "location": {
//                     "type": "string",
//                     "description": "The city and state, e.g. San Francisco, CA"
//                 },
//                 "unit": {
//                     "type": "string",
//                     "enum": ["celsius", "fahrenheit"]
//                 }
//             },
//             "required": ["location"]
//         },
//         "ouput_type": "",
//         "test_input": [],
//         "test_output": [],
//         "building_logs": []// generated by node-manager.js
//         "runing_logs": []// generated by node-manager.js
//         "commits_number": 0,
//         "current_commit_number": 0,
//         "commit_hashes": [],
//         "current_commit_hash": 0,
//         "base_nodes": [],
//         "user_nodes": [],
//         "logs_size"
//         "last_working_commit": [],
//         "number_of_iterantion_to_fix_problem": [],
//         "dev_ai_model": [
//             {
//                 "system_prompt": "",
//                 "error_fixing_prompt": "",
//                 "steps_prompt": "",
//                 "purpose": "develope",
//                 "name": "gpt-3.5-turbo-0613",
//                 "call_function": "",
//                 "url": "",
//                 "chat_history": "",
//                 "user_answeres": "",
//                 "settings": {},
//                 "embedings": {},
//                 "spliting": {},
//                 "data": [],
//                 "sources": [],
//             }
//         ],
//     },
//     "execution": {
//         "cron_settings": {
//             "schedule": "0 5 * * *"
//             "function": async function () {
//                 //https://vercel.com/docs/cron-jobs#cron-expressions
//                 //https://cron-ai.vercel.app/
//                 //shoud run current node url and return "ok"

//                 fetch(this.url,
//                     method: "POST", // or 'PUT'
//                     headers: {
//                     "Content-Type": "application/json",
//                 },
//                     body: JSON.stringify(data),)
//             },
//         },
//         "before_run_function": async function (caller, next_node, input) {
//             //check if input okay corespinding to schema
//             //should run main function
//             // caller could be node, cron, "manual"
//             // should update caller property
//             return input
//         },
//         "after_run_function": async function (output) {
//             // invoked by main
//             // should run next node or finalize flow
//             return output
//         },
//         "input": null,
//         "output": null,
//         "parent_node": {},
//         "next_node": {},
//         "workflow_index": {},
//         "workflow_nodes": {},
//         "envs": [
//             {
//                 "name": "{branch_node_name}",
//                 "value": "",
//                 "description": ""
//                 "how_to_get_it": ""
//             }
//         ],
//     },
// }